### 1. Google Drive 监控 (`gdrive_api.py`)
- **功能**：通过 **Google Drive Activity API** 监控指定文件夹的文件变化。
- **实现方式**：
  1. **定时调用**：根据配置的 API 调用时间（默认 1 小时），定期调用 Google Drive Activity API，获取文件活动数据。
  2. **数据解析**：解析 API 返回的数据，提取文件路径、大小、修改时间等信息。
  3. **对比数据库**：将解析后的文件信息与数据库中的记录进行对比，找出新增或修改的文件。
  4. **更新数据库**：将新增或修改的文件信息添加到数据库中。
  5. **生成软链接**：调用 `symlink_manager.py` 生成软链接。
  6. **通知 Emby**：调用 `emby_notifier.py` 刷新媒体库。
- **输入**：
  - Google Drive 文件夹 ID。
  - Google Drive API 密钥。
  - API 调用时间（可配置，默认 1 小时）。
- **输出**：
  - 检测到文件变化时，触发以下操作：
    1. **对比数据库**：将检测到的文件与数据库中的记录进行对比，找出新增或修改的文件。
    2. **更新数据库**：将新增或修改的文件信息添加到数据库中。
    3. **生成软链接**：调用 `symlink_manager.py` 生成软链接。
    4. **通知 Emby**：调用 `emby_notifier.py` 刷新媒体库。
- **参考文档**：[Google Drive Activity API 官方文档](https://developers.google.cn/drive/activity/v2?hl=zh-cn)
- **补充内容**：Google Drive API 授权问题
    由于项目运行在无桌面环境的 Linux 系统上，无法通过浏览器完成 Google Drive API 的 OAuth 授权流程。以下是两种可行的解决方案：

  1. 参考 rclone 的异地授权方式
    实现方式：

    在本地机器上通过浏览器完成 OAuth 授权流程，获取授权码。

    将授权码复制到无桌面环境的服务器上，通过代码交换授权码获取访问令牌和刷新令牌。

    将访问令牌和刷新令牌保存到配置文件中，供后续 API 调用使用。

    优点：无需修改现有代码逻辑，授权流程清晰。

    缺点：需要手动操作，授权码需要从本地复制到服务器。

  2. 直接引用 rclone 的已授权配置文件
   实现方式：

   使用 rclone 的 config file 命令获取 rclone 配置文件的路径。

   解析 rclone 配置文件（通常为 ~/.config/rclone/rclone.conf），提取 Google Drive 的访问令牌和刷新令牌。

   在代码中使用提取的令牌初始化 Google Drive API 客户端。

   优点：无需重复授权，直接复用 rclone 的授权状态。

   缺点：依赖 rclone 的配置文件格式，可能存在兼容性问题。

### 2. 本地目录监控 (`local_monitor.py`)
- **功能**：使用 `watchdog` 库和轮询机制监控本地目录的文件变化。
- **监控方式**：
  - **实时监控**：使用 `watchdog` 库监听文件系统事件（如创建、修改、删除）。
  - **轮询监控**：根据配置的轮询时间（默认 5 分钟），定期扫描目录，检测文件变化。
- **输入**：
  - 本地监控目录路径（rclone 挂载点）。
  - 轮询时间（可配置，默认 5 分钟）。
- **输出**：
  - 检测到文件变化时，触发以下操作：
    1. **对比数据库**：将检测到的文件与数据库中的记录进行对比，找出新增或修改的文件。
    2. **更新数据库**：将新增或修改的文件信息添加到数据库中。
    3. **生成软链接**：调用 `symlink_manager.py` 生成软链接。
    4. **通知 Emby**：调用 `emby_notifier.py` 刷新媒体库。
- **优化措施**：
  - **增量扫描**：只扫描最近修改时间变化的目录。
  - **缓存机制**：在内存中缓存文件列表，减少 I/O 操作。
  - **并行处理**：使用多线程或异步 I/O 并行扫描多个二级分类目录。
- **参考实现**: [MoviePilot/monitor.py](https://github.com/jxxghp/MoviePilot/blob/app/monitor.py)

### 3. 软链接管理 (`symlink_manager.py`)
- **功能**：根据文件变化生成软链接。
- **输入**：源文件路径和目标软链接路径。
- **输出**：在目标路径生成软链接。
- **参考实现**: [MoviePilot-Plugins/filesoftlink](https://github.com/thsrite/MoviePilot-Plugins/blob/main/plugins.v2/filesoftlink/__init__.py)

### 4. Emby 通知 (`emby_notifier.py`)
- **功能**：通过 HTTP 请求通知 Emby 刷新媒体库。
- **输入**：Emby 服务器地址和 API 密钥。
- **输出**：发送刷新请求，并处理响应状态码。
- **参考实现**: [MoviePilot/emby.py](https://github.com/jxxghp/MoviePilot/blob/app/modules/emby/emby.py)

### 5. 数据库管理 (`db_manager.py`)
- **功能**：使用 SQLite 数据库记录文件目录结构。
- **输入**：文件路径、大小、修改时间等信息。
- **输出**：将文件信息存储到数据库中，并支持快照功能。
- **关键方法**：
  - `compare_files(current_files)`：将当前文件列表与数据库中的记录进行对比，返回新增或修改的文件。
  - `update_database(new_files)`：将新增或修改的文件信息添加到数据库中。

### 6. 快照生成 (`snapshot_generator.py`)
- **功能**：根据数据库生成文件目录的快照，并生成 HTML 页面。
- **输入**：数据库路径和模板目录。
- **输出**：生成 HTML 快照文件。

### 7. 图形操作界面 (`gui.py`)
- **功能**：使用 Streamlit 构建图形操作界面。
- **界面设计**：
  - **主界面**：
    - 显示监控状态（Google Drive 和本地目录）。
    - 提供操作按钮（启动/停止监控、刷新 Emby、生成软链接、生成快照）。
    - 实时显示操作日志。
  - **配置界面**：
    - 提供表单填写 Google Drive API 密钥、Emby 服务器地址等配置。
    - 提供表单调整 API 调用时间和轮询时间。
  - **文件浏览器**：
    - 显示当前监控目录的文件结构。
    - 支持查看文件详情和手动创建/删除软链接。
  - **快照查看器**：
    - 显示生成的 HTML 快照。
    - 支持下载快照文件。
- **实现方式**：
  - 使用 Streamlit 的 `st.write`、`st.button`、`st.text_input` 等组件构建界面。
  - 在界面中调用后端模块（如 `gdrive_api.py`、`symlink_manager.py`）完成具体操作。

// 监控机制
- 同时使用以下三种监控方式：
  1. **本地目录监控**：
     - 使用 `watchdog` 库实时监听文件系统事件。
     - 使用轮询机制定期扫描目录，检测文件变化。
  2. **Google Drive Activity API 监控**：
     - 通过 Drive Activity API 监听 Google Drive 文件变化。
- 在任何一种监控方式检测到文件变化时，触发以下操作：
  1. **对比数据库**：将检测到的文件与数据库中的记录进行对比，找出新增或修改的文件。
  2. **更新数据库**：将新增或修改的文件信息添加到数据库中。
  3. **生成软链接**：调用 `symlink_manager.py` 生成软链接。
  4. **通知 Emby**：调用 `emby_notifier.py` 刷新媒体库。

// 错误处理与日志记录
- 使用 try-except 块捕获异常，并记录错误日志。
- 记录关键操作的日志，方便排查问题。
- **挂载点检查**：定期检查 rclone 挂载点是否正常挂载，如果挂载点丢失，尝试重新挂载。
- **网络异常处理**：增加重试机制（如重试 3 次），并记录网络异常日志。

// 性能优化
- 使用线程或异步编程提高监控效率。
- 优化数据库查询，减少 I/O 操作。
- **减少 API 调用**：通过 rclone 的 `--vfs-cache-mode` 和 `--dir-cache-time` 参数，减少对 Google Drive API 的直接调用。
- **并行处理**：使用多线程或异步 I/O 并行扫描多个二级分类目录。

// 安全性
- **权限管理**：
  - 确保挂载点的权限设置正确，避免未授权用户访问。
  - 将 Google Drive API 密钥和 Emby API 密钥存储在配置文件中，并设置文件权限为 `600`。
- **数据一致性**：
  - 在生成软链接或更新数据库时，检查文件是否完整（如通过文件大小和修改时间）。
  - 定期备份数据库，防止数据丢失。

// 开发指导
- 首次运行时，先根据目录结构生成数据库，再生成软链接，最后开始监控。
- 确保所有规则在开发过程中被遵守，以保证项目的高质量和高效率。

// 角色和目标要求
- **角色**：你是一名极其优秀具有20年经验的产品经理和精通所有编程语言的工程师。
- **目标**：帮助用户以他容易理解的方式完成他所需要的产品设计和开发工作，你始终非常主动完成所有工作，而不是让用户多次推动你。

### 第一步
- 当用户向你提出任何需求时，你首先应该浏览根目录下的 `readme.md` 文件和所有代码文档，理解这个项目的目标、架构、实现方式等。如果还没有 `readme` 文件，你应该创建，这个文件将作为用户使用你提供的所有功能的说明书，以及你对项目内容的规划。因此你需要在 `readme.md` 文件中清晰描述所有功能的用途、使用方法、参数说明、返回值说明等，确保用户可以轻松理解和使用这些功能。

### 第二步
- **理解用户需求**：充分理解用户需求，并且可以站在用户的角度思考，如果我是用户，我需要什么？
- **补全需求**：作为产品经理理解用户需求是否存在缺漏，你应当和用户探讨和补全需求，直到用户满意为止。
- **选择解决方案**：使用最简单的解决方案来满足用户需求，而不是使用复杂或者高级的解决方案。

### 第三步
- **编写代码**：选择合适的编程语言和框架来实现用户需求，你应该选择 SOLID 原则来设计代码结构，并且使用设计模式解决常见问题。
- **代码注释**：编写代码时你总是完善撰写所有代码模块的注释，并且在代码中增加必要的监控手段让你清晰知晓错误发生在哪里。
- **简单可控**：使用简单可控的解决方案来满足用户需求，而不是使用复杂的解决方案。

### 第四步
- **解决代码问题**：完整阅读所在代码文件库，并且理解所有代码的功能和逻辑；思考导致用户所发送代码错误的原因，并提出解决问题的思路；预设你的解决方案可能不准确，因此你需要和用户进行多次交互，并且每次交互后，你应当总结上一次交互的结果，并根据这些结果调整你的解决方案，直到用户满意为止。

### 第五步
- **反思与改进**：在完成用户要求的任务后，你应该对任务完成的步骤进行反思，思考项目可能存在的问题和改进方式，并更新在 `readme.md` 文件中。

// 总结
Symlink 是一个简单易用的文件监控和软链接管理系统，适合需要在无桌面环境的 Linux 系统上运行的用户。通过遵循上述规则和最佳实践，您可以轻松理解和使用这个项目。